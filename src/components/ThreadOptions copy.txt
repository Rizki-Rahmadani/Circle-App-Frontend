import { Button, IconButton, Textarea, Input, Image } from '@chakra-ui/react';
import { Menu, MenuButton, MenuList, MenuItem } from '@chakra-ui/menu';
import {
  DialogRoot,
  DialogContent,
  DialogHeader,
  DialogBody,
  DialogFooter,
} from '@/components/ui/dialog';
import { BsThreeDots } from 'react-icons/bs';
import { FiEdit2, FiTrash2 } from 'react-icons/fi';
import {
  deleteThread,
  updateThread,
} from '@/features/dashboard/services/thread.services';
import { useState } from 'react';

interface ThreadOptionsProps {
  threadId: number;
  authorId: number;
  currentUserId: number;
  content: string;
  image?: string; // Add image prop
  onThreadDeleted: () => void;
  onThreadUpdated: (newContent: string, newImage?: File) => void; // Update to include image
}

const ThreadOptions = ({
  threadId,
  authorId,
  currentUserId,
  content,
  image,
  onThreadDeleted,
  onThreadUpdated,
}: ThreadOptionsProps) => {
  const [isEditDialogOpen, setEditDialogOpen] = useState(false);
  const [newContent, setNewContent] = useState(content);
  const [newImage, setNewImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(
    image || null
  );

  const handleEdit = async () => {
    try {
      await updateThread(threadId, newContent, newImage || undefined);
      onThreadUpdated(newContent, newImage || undefined);
      setEditDialogOpen(false);
    } catch (error) {
      console.error('Error updating thread:', error);
    }
  };

  const handleDelete = async () => {
    try {
      await deleteThread(threadId);
      onThreadDeleted();
    } catch (error) {
      console.error('Error deleting thread:', error);
    }
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const file = e.target.files[0];
      setNewImage(file);
      setImagePreview(URL.createObjectURL(file)); // Set preview for the new image
    }
  };

  return (
    <>
      <Menu>
        <MenuButton
          as={IconButton}
          aria-label="Thread options"
          variant="ghost"
          size="sm"
        >
          <BsThreeDots />
        </MenuButton>
        <MenuList bg="gray.800">
          {currentUserId === authorId && (
            <>
              <MenuItem
                icon={<FiEdit2 />}
                onClick={() => setEditDialogOpen(true)}
                _hover={{ bg: 'gray.700' }}
              >
                Edit
              </MenuItem>
              <MenuItem
                icon={<FiTrash2 />}
                onClick={handleDelete}
                _hover={{ bg: 'gray.700' }}
                color="red.400"
              >
                Delete
              </MenuItem>
            </>
          )}
        </MenuList>
      </Menu>

      <DialogRoot
        open={isEditDialogOpen}
        onOpenChange={(details) => setEditDialogOpen(details.open)}
      >
        <DialogContent>
          <DialogHeader>Edit Thread</DialogHeader>
          <DialogBody>
            <Textarea
              value={newContent}
              onChange={(e) => setNewContent(e.target.value)}
              placeholder="Edit your thread content here..."
              size="sm"
            />
            {imagePreview && (
              <Image
                src={imagePreview}
                alt="Image Preview"
                maxWidth="100%"
                marginTop="10px"
                marginBottom="10px"
              />
            )}
            <Input
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              marginTop="10px"
            />
          </DialogBody>
          <DialogFooter>
            <Button colorScheme="blue" onClick={handleEdit}>
              Save
            </Button>
            <Button variant="ghost" onClick={() => setEditDialogOpen(false)}>
              Cancel
            </Button>
          </DialogFooter>
        </DialogContent>
      </DialogRoot>
    </>
  );
};

export default ThreadOptions;
